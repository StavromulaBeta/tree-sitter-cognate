Let Ignored List ("If" "+" "-" "*" "/" ">" "<" "<=" ">=" "==" "!=" "^" "Not" "And" "Or" "Xor" "List" "Number" "Box" "True" "False" "Number!" "String!" "List!" "Block!" "Symbol!" "Boolean!" "Box!" "Io!" "Any!" "Number?" "String?" "List?" "Block?" "Symbol?" "Boolean?" "Box?" "Io?" "Any?");
Let Include List ("Drop" "Prepend" "Index" "All" "Discard" "None" "Append" "Swap" "Fold" "Prints" "Times" "Range" "Twin" "Take" "Triplet" "Min" "Reverse" "Filter" "Max" "When" "Case" "Map" "Puts" "Sort" "Assert" "Length");

Def In as ( Let L ; Let X ; Not None (== X) in L);

With "src/builtins.c" "r" (
    Read-file;
    Split on "\n";

    Filter by Regex "^{\\.name=\"";
    Map (
        Split on "\"" ;
        Index 1;
        Twin;
        Swap Tail;
        Join Uppercase Head;
    );
    Filter by (Not In Ignored);
);
Append Include;
Twin;

~~ Scheme/elisp syntax lists
For Swap (
    Join Swap "\"";
    Join "\"";
    Put;
    Put " ";
);

Print "";

~~ Regex patterns for Helix
Put "\"^(";
For Swap (
    ~~ TODO: Escape regex special characters '?'
    Put;
    Put "|";
);
Put ")$\"";

